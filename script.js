// Generated by Bolt for Harbor Health

document.addEventListener('DOMContentLoaded', () => {
  initSmoothScroll();
  initMobileNav();
  initScrollReveal();
  initStickyHeader();
  initChatWidget();
  initTestimonialsCarousel();
  initFAQAccordion();
  initForms();
  initCopyEmail();
});

function initSmoothScroll() {
  document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
      const href = this.getAttribute('href');
      if (href === '#') return;

      e.preventDefault();
      const target = document.querySelector(href);
      if (target) {
        target.scrollIntoView({
          behavior: 'smooth',
          block: 'start'
        });
      }
    });
  });
}

function initMobileNav() {
  const navToggle = document.querySelector('.nav-toggle');
  const mainNav = document.querySelector('.main-nav');

  if (!navToggle || !mainNav) return;

  navToggle.addEventListener('click', () => {
    const isExpanded = navToggle.getAttribute('aria-expanded') === 'true';
    navToggle.setAttribute('aria-expanded', !isExpanded);
    mainNav.classList.toggle('active');

    if (!isExpanded) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = '';
    }
  });

  mainNav.querySelectorAll('a').forEach(link => {
    link.addEventListener('click', () => {
      navToggle.setAttribute('aria-expanded', 'false');
      mainNav.classList.remove('active');
      document.body.style.overflow = '';
    });
  });

  document.addEventListener('click', (e) => {
    if (!mainNav.contains(e.target) && !navToggle.contains(e.target)) {
      navToggle.setAttribute('aria-expanded', 'false');
      mainNav.classList.remove('active');
      document.body.style.overflow = '';
    }
  });
}

function initScrollReveal() {
  const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
  if (prefersReducedMotion) return;

  const revealElements = document.querySelectorAll('.reveal-on-scroll');

  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add('revealed');
      }
    });
  }, {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px'
  });

  revealElements.forEach(el => observer.observe(el));
}

function initStickyHeader() {
  const header = document.querySelector('#site-header');
  if (!header) return;

  let lastScroll = 0;

  window.addEventListener('scroll', () => {
    const currentScroll = window.pageYOffset;

    if (currentScroll > 100) {
      header.classList.add('scrolled');
    } else {
      header.classList.remove('scrolled');
    }

    lastScroll = currentScroll;
  });
}

function initChatWidget() {
  const chatFab = document.getElementById('chat-fab');
  const openChatBtn = document.getElementById('open-chat');
  const chatModal = document.getElementById('chat-modal');
  const chatClose = document.getElementById('chat-close');
  const chatMessages = document.getElementById('chat-messages');
  const chatInput = document.getElementById('chat-input');
  const chatSend = document.getElementById('chat-send');
  const quickReplies = document.querySelectorAll('.quick-reply');

  if (!chatFab || !chatModal) return;

  function openChat() {
    chatModal.classList.add('active');
    chatFab.style.display = 'none';
    chatInput.focus();
    trapFocus(chatModal);
  }

  function closeChat() {
    chatModal.classList.remove('active');
    chatFab.style.display = 'block';
    document.body.style.overflow = '';
  }

  chatFab.addEventListener('click', openChat);
  if (openChatBtn) {
    openChatBtn.addEventListener('click', openChat);
  }

  chatClose.addEventListener('click', closeChat);

  quickReplies.forEach(btn => {
    btn.addEventListener('click', function() {
      const reply = this.dataset.reply;
      handleQuickReply(reply);
    });
  });

  chatSend.addEventListener('click', () => {
    const message = chatInput.value.trim();
    if (message) {
      addChatMessage(message, 'user');
      chatInput.value = '';
      setTimeout(() => {
        addChatMessage('Thank you for your message. For real assistance, please call our pharmacist at (361) 555-0000.', 'bot');
      }, 500);
    }
  });

  chatInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
      chatSend.click();
    }
  });

  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && chatModal.classList.contains('active')) {
      closeChat();
    }
  });

  function handleQuickReply(type) {
    const responses = {
      refill: [
        'I can help you check on your refill status!',
        'To check your refill status, you can call us at (361) 555-0000 or visit the Refills page on our website.',
        'Would you like me to help you with anything else?'
      ],
      transfer: [
        'I can help you transfer prescriptions to Harbor Health.',
        'Visit our Delivery & Transfers page to fill out a simple transfer form. We\'ll handle everything with your previous pharmacy!',
        'Most transfers are complete within a few hours.'
      ],
      vaccinations: [
        'We offer a full range of immunizations!',
        'Available vaccines include flu shots, COVID-19, shingles, pneumonia, and travel vaccines.',
        'Walk-ins welcome or call (361) 555-0000 to schedule.'
      ],
      pharmacist: [
        'Our licensed pharmacists are available 24/7.',
        'For immediate assistance, please call our pharmacist line at (361) 555-0000.',
        'They can answer questions about medications, side effects, interactions, and general health advice.'
      ]
    };

    const messages = responses[type] || ['How can I help you today?'];

    messages.forEach((msg, index) => {
      setTimeout(() => {
        addChatMessage(msg, 'bot');
      }, index * 800);
    });
  }

  function addChatMessage(text, sender) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `chat-message ${sender}`;

    const p = document.createElement('p');
    p.textContent = text;
    messageDiv.appendChild(p);

    chatMessages.appendChild(messageDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;
  }

  function trapFocus(element) {
    const focusableElements = element.querySelectorAll(
      'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
    );
    const firstElement = focusableElements[0];
    const lastElement = focusableElements[focusableElements.length - 1];

    element.addEventListener('keydown', function(e) {
      if (e.key !== 'Tab') return;

      if (e.shiftKey) {
        if (document.activeElement === firstElement) {
          lastElement.focus();
          e.preventDefault();
        }
      } else {
        if (document.activeElement === lastElement) {
          firstElement.focus();
          e.preventDefault();
        }
      }
    });
  }
}

function initTestimonialsCarousel() {
  const carousel = document.querySelector('.testimonials-carousel');
  if (!carousel) return;

  const testimonials = carousel.querySelectorAll('.testimonial');
  const prevBtn = carousel.querySelector('.carousel-btn.prev');
  const nextBtn = carousel.querySelector('.carousel-btn.next');
  const dotsContainer = carousel.querySelector('.carousel-dots');

  let currentIndex = 0;
  let autoPlayInterval;

  testimonials.forEach((_, index) => {
    const dot = document.createElement('div');
    dot.className = 'carousel-dot';
    if (index === 0) dot.classList.add('active');
    dot.addEventListener('click', () => goToSlide(index));
    dotsContainer.appendChild(dot);
  });

  const dots = dotsContainer.querySelectorAll('.carousel-dot');

  function goToSlide(index) {
    testimonials[currentIndex].classList.remove('active');
    dots[currentIndex].classList.remove('active');

    currentIndex = index;

    testimonials[currentIndex].classList.add('active');
    dots[currentIndex].classList.add('active');
  }

  function nextSlide() {
    const next = (currentIndex + 1) % testimonials.length;
    goToSlide(next);
  }

  function prevSlide() {
    const prev = (currentIndex - 1 + testimonials.length) % testimonials.length;
    goToSlide(prev);
  }

  function startAutoPlay() {
    autoPlayInterval = setInterval(nextSlide, 5000);
  }

  function stopAutoPlay() {
    clearInterval(autoPlayInterval);
  }

  nextBtn.addEventListener('click', () => {
    nextSlide();
    stopAutoPlay();
    startAutoPlay();
  });

  prevBtn.addEventListener('click', () => {
    prevSlide();
    stopAutoPlay();
    startAutoPlay();
  });

  carousel.addEventListener('mouseenter', stopAutoPlay);
  carousel.addEventListener('mouseleave', startAutoPlay);

  startAutoPlay();
}

function initFAQAccordion() {
  const faqQuestions = document.querySelectorAll('.faq-question');

  faqQuestions.forEach(question => {
    question.addEventListener('click', function() {
      const isExpanded = this.getAttribute('aria-expanded') === 'true';
      const answer = this.nextElementSibling;

      faqQuestions.forEach(q => {
        if (q !== this) {
          q.setAttribute('aria-expanded', 'false');
          q.nextElementSibling.classList.remove('active');
        }
      });

      this.setAttribute('aria-expanded', !isExpanded);
      answer.classList.toggle('active');
    });
  });
}

function initForms() {
  const refillForm = document.getElementById('refill-form');
  const transferForm = document.getElementById('transfer-form');
  const contactForm = document.getElementById('contact-form');

  if (refillForm) {
    refillForm.addEventListener('submit', handleRefillSubmit);

    const newRefillBtn = document.getElementById('new-refill-btn');
    if (newRefillBtn) {
      newRefillBtn.addEventListener('click', () => {
        document.getElementById('refill-confirmation').style.display = 'none';
        refillForm.style.display = 'block';
        refillForm.reset();
        window.scrollTo({ top: 0, behavior: 'smooth' });
      });
    }
  }

  if (transferForm) {
    transferForm.addEventListener('submit', handleTransferSubmit);

    const newTransferBtn = document.getElementById('new-transfer-btn');
    if (newTransferBtn) {
      newTransferBtn.addEventListener('click', () => {
        document.getElementById('transfer-confirmation').style.display = 'none';
        transferForm.style.display = 'block';
        transferForm.reset();
        window.scrollTo({ top: transferForm.offsetTop - 100, behavior: 'smooth' });
      });
    }
  }

  if (contactForm) {
    contactForm.addEventListener('submit', handleContactSubmit);

    const newMessageBtn = document.getElementById('new-message-btn');
    if (newMessageBtn) {
      newMessageBtn.addEventListener('click', () => {
        document.getElementById('contact-confirmation').style.display = 'none';
        contactForm.style.display = 'block';
        contactForm.reset();
        window.scrollTo({ top: 0, behavior: 'smooth' });
      });
    }
  }
}

function handleRefillSubmit(e) {
  e.preventDefault();

  if (!validateForm(this)) {
    return;
  }

  const formData = new FormData(this);
  const data = Object.fromEntries(formData.entries());

  const confirmationDetails = document.getElementById('confirmation-details');
  confirmationDetails.innerHTML = `
    <div style="text-align: left; margin: 1.5rem 0; padding: 1rem; background: white; border-radius: 8px;">
      <p><strong>Name:</strong> ${data.fullName}</p>
      <p><strong>Phone:</strong> ${data.phone}</p>
      <p><strong>Prescription #:</strong> ${data.rxNumber}</p>
      <p><strong>Fulfillment:</strong> ${data.fulfillment === 'pickup' ? 'Pickup at pharmacy' : 'Free delivery'}</p>
      ${data.autoRefill ? '<p><strong>Auto-Refill:</strong> Enrolled ✓</p>' : ''}
    </div>
  `;

  this.style.display = 'none';
  document.getElementById('refill-confirmation').style.display = 'block';
  window.scrollTo({ top: 0, behavior: 'smooth' });
}

function handleTransferSubmit(e) {
  e.preventDefault();

  if (!validateForm(this)) {
    return;
  }

  const formData = new FormData(this);
  const data = Object.fromEntries(formData.entries());

  const confirmationDetails = document.getElementById('transfer-confirmation-details');
  confirmationDetails.innerHTML = `
    <div style="text-align: left; margin: 1.5rem 0; padding: 1rem; background: white; border-radius: 8px;">
      <p><strong>Name:</strong> ${data.name}</p>
      <p><strong>Phone:</strong> ${data.phone}</p>
      <p><strong>Current Pharmacy:</strong> ${data.currentPharmacy}</p>
      <p><strong>Pharmacy Phone:</strong> ${data.pharmacyPhone}</p>
    </div>
  `;

  this.style.display = 'none';
  document.getElementById('transfer-confirmation').style.display = 'block';
  window.scrollTo({ top: document.getElementById('transfer').offsetTop - 100, behavior: 'smooth' });
}

function handleContactSubmit(e) {
  e.preventDefault();

  if (!validateForm(this)) {
    return;
  }

  this.style.display = 'none';
  document.getElementById('contact-confirmation').style.display = 'block';
  window.scrollTo({ top: 0, behavior: 'smooth' });
}

function validateForm(form) {
  let isValid = true;
  const requiredFields = form.querySelectorAll('[required]');

  requiredFields.forEach(field => {
    clearFieldError(field);

    if (!field.value.trim()) {
      showFieldError(field, 'This field is required');
      isValid = false;
    } else if (field.type === 'email' && !isValidEmail(field.value)) {
      showFieldError(field, 'Please enter a valid email address');
      isValid = false;
    } else if (field.type === 'tel' && !isValidPhone(field.value)) {
      showFieldError(field, 'Please enter a valid phone number');
      isValid = false;
    } else if (field.type === 'date' && !field.value) {
      showFieldError(field, 'Please select a date');
      isValid = false;
    } else if (field.tagName === 'SELECT' && !field.value) {
      showFieldError(field, 'Please select an option');
      isValid = false;
    } else if (field.type === 'radio') {
      const radioGroup = form.querySelectorAll(`input[name="${field.name}"]`);
      const isChecked = Array.from(radioGroup).some(radio => radio.checked);
      if (!isChecked) {
        showFieldError(field, 'Please select an option');
        isValid = false;
      }
    }
  });

  const ssnField = form.querySelector('#ssn-last4');
  if (ssnField && ssnField.value && !/^\d{4}$/.test(ssnField.value)) {
    showFieldError(ssnField, 'Please enter exactly 4 digits');
    isValid = false;
  }

  return isValid;
}

function showFieldError(field, message) {
  field.classList.add('error');
  const errorSpan = field.parentElement.querySelector('.error-message');
  if (errorSpan) {
    errorSpan.textContent = message;
    errorSpan.classList.add('active');
  }

  field.setAttribute('aria-invalid', 'true');
}

function clearFieldError(field) {
  field.classList.remove('error');
  const errorSpan = field.parentElement.querySelector('.error-message');
  if (errorSpan) {
    errorSpan.textContent = '';
    errorSpan.classList.remove('active');
  }

  field.removeAttribute('aria-invalid');
}

function isValidEmail(email) {
  return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
}

function isValidPhone(phone) {
  const cleaned = phone.replace(/\D/g, '');
  return cleaned.length >= 10;
}

function initCopyEmail() {
  const copyBtns = document.querySelectorAll('#copy-email-btn, #copy-email-btn-confirmation');
  const email = 'contact@harborhealthpharmacy.com';

  copyBtns.forEach(btn => {
    btn.addEventListener('click', function() {
      navigator.clipboard.writeText(email).then(() => {
        const tooltip = document.getElementById('copy-tooltip');
        if (tooltip) {
          tooltip.classList.add('active');
          setTimeout(() => {
            tooltip.classList.remove('active');
          }, 2000);
        }

        const originalText = this.textContent;
        this.textContent = 'Copied!';
        setTimeout(() => {
          this.textContent = originalText;
        }, 2000);
      }).catch(err => {
        console.error('Failed to copy email:', err);
        alert('Email copied: ' + email);
      });
    });
  });
}
